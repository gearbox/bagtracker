"""init schema

Revision ID: b0a45d5d7934
Revises:
Create Date: 2025-10-26 00:19:22.472183

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

from backend.security.encryption import EncryptedString

# revision identifiers, used by Alembic.
revision: str = "b0a45d5d7934"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "chains",
        sa.Column("name", sa.String(length=20), nullable=False),
        sa.Column("name_full", sa.Text(), nullable=True),
        sa.Column("chain_type", sa.String(length=20), nullable=False),
        sa.Column("chain_id", sa.String(length=20), nullable=True),
        sa.Column("explorer_url", sa.Text(), nullable=True),
        sa.Column("block_time_seconds", sa.Integer(), nullable=True),
        sa.Column("is_testnet", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("is_active", sa.Boolean(), server_default="true", nullable=False),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index("idx_chain_active_testnet", "chains", ["is_active", "is_testnet"], unique=False)
    op.create_index(op.f("ix_chains_created_at"), "chains", ["created_at"], unique=False)
    op.create_index(op.f("ix_chains_uuid"), "chains", ["uuid"], unique=False)
    op.create_table(
        "exchanges",
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("display_name", sa.String(length=100), nullable=True),
        sa.Column("website_url", sa.Text(), nullable=True),
        sa.Column("api_base_url", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), server_default="true", nullable=False),
        sa.Column("rate_limit_per_minute", sa.Integer(), nullable=True),
        sa.Column("weight_limit_per_minute", sa.Integer(), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_exchanges_created_at"), "exchanges", ["created_at"], unique=False)
    op.create_index(op.f("ix_exchanges_uuid"), "exchanges", ["uuid"], unique=False)
    op.create_table(
        "users",
        sa.Column("username", sa.String(length=50), nullable=False),
        sa.Column("password_hash", sa.Text(), nullable=True),
        sa.Column("email", sa.String(length=256), nullable=True),
        sa.Column("name", sa.String(length=100), nullable=True),
        sa.Column("last_name", sa.String(length=100), nullable=True),
        sa.Column("nickname", sa.String(length=50), nullable=True),
        sa.Column("last_login", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.CheckConstraint("email ~ '^[a-z0-9._%%+-]+@[a-z0-9.-]+\\.[a-z]{2,}$'", name="check_email_format_lower"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_created_at"), "users", ["created_at"], unique=False)
    op.create_index("ix_users_email_active", "users", ["email"], unique=True, postgresql_where="is_deleted = false")
    op.create_index(
        "ix_users_username_active", "users", ["username"], unique=True, postgresql_where="is_deleted = false"
    )
    op.create_index(op.f("ix_users_uuid"), "users", ["uuid"], unique=False)
    op.create_table(
        "portfolios",
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("total_value_usd", sa.Numeric(precision=20, scale=4), nullable=False),
        sa.Column("last_sync_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_portfolios_created_at"), "portfolios", ["created_at"], unique=False)
    op.create_index(op.f("ix_portfolios_user_id"), "portfolios", ["user_id"], unique=False)
    op.create_index(op.f("ix_portfolios_uuid"), "portfolios", ["uuid"], unique=False)
    op.create_table(
        "rpcs",
        sa.Column("chain_id", sa.BigInteger(), nullable=False),
        sa.Column("name", sa.String(length=50), nullable=False),
        sa.Column("rpc_url", sa.Text(), nullable=True),
        sa.Column("is_failover_url", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("priority", sa.Integer(), nullable=False),
        sa.Column("is_active", sa.Boolean(), server_default="true", nullable=False),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("chain_id", "name", name="uq_rpc_chain_name"),
        sa.UniqueConstraint("name"),
    )
    op.create_index("idx_rpc_chain_priority", "rpcs", ["chain_id", "priority", "is_active"], unique=False)
    op.create_index(op.f("ix_rpcs_created_at"), "rpcs", ["created_at"], unique=False)
    op.create_index(op.f("ix_rpcs_uuid"), "rpcs", ["uuid"], unique=False)
    op.create_table(
        "tokens",
        sa.Column("chain_id", sa.BigInteger(), nullable=False),
        sa.Column("symbol", sa.String(length=10), nullable=False),
        sa.Column("name", sa.String(length=20), nullable=True),
        sa.Column("decimals", sa.Integer(), nullable=False),
        sa.Column("contract_address", sa.Text(), nullable=True),
        sa.Column("contract_address_lowercase", sa.Text(), nullable=True),
        sa.Column("token_standard", sa.String(length=10), nullable=True),
        sa.Column("is_native", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("coingecko_id", sa.String(length=100), nullable=True),
        sa.Column("coinmarketcap_id", sa.Integer(), nullable=True),
        sa.Column("current_price_usd", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("market_cap_usd", sa.Numeric(precision=30, scale=4), nullable=True),
        sa.Column("volume_24h_usd", sa.Numeric(precision=20, scale=4), nullable=True),
        sa.Column("price_change_24h_percent", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("logo_url", sa.Text(), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("project_url", sa.Text(), nullable=True),
        sa.Column("whitepaper_url", sa.Text(), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.CheckConstraint("current_price_usd IS NULL OR current_price_usd >= 0", name="non_negative_price"),
        sa.CheckConstraint("decimals >= 0 AND decimals <= 18", name="safe_decimals_range"),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("coingecko_id"),
        sa.UniqueConstraint("contract_address_lowercase", "chain_id", name="uq_token_contract_chain"),
        sa.UniqueConstraint("symbol", "chain_id", "contract_address_lowercase", name="uq_token_symbol_chain_contract"),
    )
    op.create_index("idx_token_chain_native", "tokens", ["chain_id", "is_native"], unique=False)
    op.create_index("idx_token_price", "tokens", ["current_price_usd"], unique=False)
    op.create_index("idx_token_symbol_chain", "tokens", ["symbol", "chain_id"], unique=False)
    op.create_index(op.f("ix_tokens_chain_id"), "tokens", ["chain_id"], unique=False)
    op.create_index(op.f("ix_tokens_created_at"), "tokens", ["created_at"], unique=False)
    op.create_index(op.f("ix_tokens_uuid"), "tokens", ["uuid"], unique=False)
    op.create_table(
        "cex_accounts",
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("exchange_id", sa.BigInteger(), nullable=False),
        sa.Column("portfolio_id", sa.BigInteger(), nullable=True),
        sa.Column("name", sa.String(length=50), nullable=True),
        sa.Column("api_key", EncryptedString(length=500), nullable=True),
        sa.Column("api_secret", EncryptedString(length=500), nullable=True),
        sa.Column("passphrase", EncryptedString(length=500), nullable=True),
        sa.Column("sync_enabled", sa.Boolean(), server_default="true", nullable=False),
        sa.Column("last_sync_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("total_value_usd", sa.Numeric(precision=20, scale=4), nullable=False),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(["exchange_id"], ["exchanges.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["portfolio_id"], ["portfolios.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_cex_account_user_exchange", "cex_accounts", ["user_id", "exchange_id"], unique=False)
    op.create_index(op.f("ix_cex_accounts_created_at"), "cex_accounts", ["created_at"], unique=False)
    op.create_index(op.f("ix_cex_accounts_uuid"), "cex_accounts", ["uuid"], unique=False)
    op.create_table(
        "wallets",
        sa.Column("user_id", sa.BigInteger(), nullable=False),
        sa.Column("chain_id", sa.BigInteger(), nullable=False),
        sa.Column("portfolio_id", sa.BigInteger(), nullable=True),
        sa.Column("name", sa.String(length=50), nullable=True),
        sa.Column("wallet_type", sa.String(length=20), nullable=False),
        sa.Column("address", sa.Text(), nullable=False),
        sa.Column("sync_enabled", sa.Boolean(), server_default="true", nullable=False),
        sa.Column("is_watched_only", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("last_sync_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("total_value_usd", sa.Numeric(precision=20, scale=4), nullable=False),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["portfolio_id"], ["portfolios.id"], ondelete="SET NULL"),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("address", "chain_id", name="uq_wallet_address_chain"),
    )
    op.create_index(op.f("ix_wallets_address"), "wallets", ["address"], unique=True)
    op.create_index(op.f("ix_wallets_chain_id"), "wallets", ["chain_id"], unique=False)
    op.create_index(op.f("ix_wallets_created_at"), "wallets", ["created_at"], unique=False)
    op.create_index("ix_wallets_portfolio", "wallets", ["portfolio_id"], unique=False)
    op.create_index("ix_wallets_user_chain", "wallets", ["user_id", "chain_id"], unique=False)
    op.create_index(op.f("ix_wallets_uuid"), "wallets", ["uuid"], unique=False)
    op.create_table(
        "balances",
        sa.Column("previous_balance_decimal", sa.Numeric(precision=38, scale=18), nullable=True),
        sa.Column("balance_change_24h", sa.Numeric(precision=38, scale=18), nullable=True),
        sa.Column("balance_change_percent_24h", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("last_updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("last_sync_block", sa.Integer(), nullable=True),
        sa.Column("sync_status", sa.String(length=20), nullable=False),
        sa.Column("all_time_high_usd", sa.Numeric(precision=20, scale=4), nullable=True),
        sa.Column("all_time_high_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.Column("wallet_id", sa.BigInteger(), nullable=False),
        sa.Column("chain_id", sa.BigInteger(), nullable=False),
        sa.Column("token_id", sa.BigInteger(), nullable=False),
        sa.Column("amount", sa.Numeric(precision=38, scale=0), nullable=False),
        sa.Column("amount_decimal", sa.Numeric(precision=38, scale=18), nullable=False),
        sa.Column("price_usd", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("avg_price_usd", sa.Numeric(precision=20, scale=4), nullable=False),
        sa.Column("last_price_update", sa.DateTime(timezone=True), nullable=True),
        sa.CheckConstraint("amount >= 0", name="non_negative_balance_raw"),
        sa.CheckConstraint("amount_decimal >= 0", name="non_negative_balance_decimal"),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["token_id"], ["tokens.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["wallet_id"], ["wallets.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("wallet_id", "token_id", "chain_id", name="uq_wallet_token_chain"),
    )
    op.create_index(op.f("ix_balances_chain_id"), "balances", ["chain_id"], unique=False)
    op.create_index(op.f("ix_balances_created_at"), "balances", ["created_at"], unique=False)
    op.create_index(op.f("ix_balances_token_id"), "balances", ["token_id"], unique=False)
    op.create_index(op.f("ix_balances_uuid"), "balances", ["uuid"], unique=False)
    op.create_index(op.f("ix_balances_wallet_id"), "balances", ["wallet_id"], unique=False)
    op.create_table(
        "balances_history",
        sa.Column("snapshot_date", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("snapshot_type", sa.String(length=20), nullable=False),
        sa.Column("triggered_by", sa.String(length=50), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.Column("wallet_id", sa.BigInteger(), nullable=False),
        sa.Column("chain_id", sa.BigInteger(), nullable=False),
        sa.Column("token_id", sa.BigInteger(), nullable=False),
        sa.Column("amount", sa.Numeric(precision=38, scale=0), nullable=False),
        sa.Column("amount_decimal", sa.Numeric(precision=38, scale=18), nullable=False),
        sa.Column("price_usd", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("avg_price_usd", sa.Numeric(precision=20, scale=4), nullable=False),
        sa.Column("last_price_update", sa.DateTime(timezone=True), nullable=True),
        sa.CheckConstraint(
            "snapshot_type IN ('transaction', 'hourly', 'daily', 'weekly', 'monthly')", name="valid_snapshot_type"
        ),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["token_id"], ["tokens.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["wallet_id"], ["wallets.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("snapshot_date", "id"),
    )
    op.create_index(
        "ix_balance_history_token_date", "balances_history", ["token_id", "chain_id", "snapshot_date"], unique=False
    )
    op.create_index(
        "ix_balance_history_type_date", "balances_history", ["snapshot_type", "snapshot_date"], unique=False
    )
    op.create_index("ix_balance_history_wallet_date", "balances_history", ["wallet_id", "snapshot_date"], unique=False)
    op.create_index(op.f("ix_balances_history_chain_id"), "balances_history", ["chain_id"], unique=False)
    op.create_index(op.f("ix_balances_history_created_at"), "balances_history", ["created_at"], unique=False)
    op.create_index(op.f("ix_balances_history_snapshot_date"), "balances_history", ["snapshot_date"], unique=False)
    op.create_index(op.f("ix_balances_history_token_id"), "balances_history", ["token_id"], unique=False)
    op.create_index(op.f("ix_balances_history_uuid"), "balances_history", ["uuid"], unique=False)
    op.create_index(op.f("ix_balances_history_wallet_id"), "balances_history", ["wallet_id"], unique=False)
    op.create_table(
        "cex_subaccounts",
        sa.Column("account_id", sa.BigInteger(), nullable=False),
        sa.Column("subaccount_type", sa.String(length=50), nullable=False),
        sa.Column("subaccount_name", sa.String(length=100), nullable=True),
        sa.Column("total_value_usd", sa.Numeric(precision=20, scale=4), nullable=False),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.ForeignKeyConstraint(
            ["account_id"],
            ["cex_accounts.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("account_id", "subaccount_type", "subaccount_name", name="uq_subaccount_identifier"),
    )
    op.create_index(op.f("ix_cex_subaccounts_created_at"), "cex_subaccounts", ["created_at"], unique=False)
    op.create_index(op.f("ix_cex_subaccounts_uuid"), "cex_subaccounts", ["uuid"], unique=False)
    op.create_table(
        "nft_balances",
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.Column("wallet_id", sa.BigInteger(), nullable=False),
        sa.Column("contract_address", sa.String(length=200), nullable=False),
        sa.Column("collection_name", sa.String(length=100), nullable=True),
        sa.Column("symbol", sa.String(length=50), nullable=True),
        sa.Column("nft_token_id", sa.String(length=100), nullable=False),
        sa.Column("token_standard", sa.String(length=20), nullable=False),
        sa.Column("token_url", sa.Text(), nullable=True),
        sa.Column("token_metadata", sa.JSON(), nullable=True),
        sa.Column("name", sa.String(length=20), nullable=True),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("price_usd", sa.Numeric(precision=20, scale=4), nullable=False),
        sa.Column("image_url", sa.Text(), nullable=True),
        sa.CheckConstraint("amount >= 0", name="positive_amount"),
        sa.ForeignKeyConstraint(["wallet_id"], ["wallets.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("wallet_id", "contract_address", name="uq_nft_wallet_token"),
    )
    op.create_index(op.f("ix_nft_balances_created_at"), "nft_balances", ["created_at"], unique=False)
    op.create_index(op.f("ix_nft_balances_uuid"), "nft_balances", ["uuid"], unique=False)
    op.create_table(
        "nft_balances_history",
        sa.Column("snapshot_date", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("snapshot_type", sa.String(length=20), nullable=False),
        sa.Column("triggered_by", sa.String(length=50), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.Column("wallet_id", sa.BigInteger(), nullable=False),
        sa.Column("contract_address", sa.String(length=200), nullable=False),
        sa.Column("collection_name", sa.String(length=100), nullable=True),
        sa.Column("symbol", sa.String(length=50), nullable=True),
        sa.Column("nft_token_id", sa.String(length=100), nullable=False),
        sa.Column("token_standard", sa.String(length=20), nullable=False),
        sa.Column("token_url", sa.Text(), nullable=True),
        sa.Column("token_metadata", sa.JSON(), nullable=True),
        sa.Column("name", sa.String(length=20), nullable=True),
        sa.Column("amount", sa.Integer(), nullable=False),
        sa.Column("price_usd", sa.Numeric(precision=20, scale=4), nullable=False),
        sa.Column("image_url", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(["wallet_id"], ["wallets.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("snapshot_date", "id"),
    )
    op.create_index("idx_nft_history_wallet_date", "nft_balances_history", ["wallet_id", "snapshot_date"], unique=False)
    op.create_index(op.f("ix_nft_balances_history_created_at"), "nft_balances_history", ["created_at"], unique=False)
    op.create_index(
        op.f("ix_nft_balances_history_snapshot_date"), "nft_balances_history", ["snapshot_date"], unique=False
    )
    op.create_index(op.f("ix_nft_balances_history_uuid"), "nft_balances_history", ["uuid"], unique=False)
    op.create_table(
        "transactions",
        sa.Column("wallet_id", sa.BigInteger(), nullable=True),
        sa.Column("cex_account_id", sa.BigInteger(), nullable=True),
        sa.Column("chain_id", sa.BigInteger(), nullable=True),
        sa.Column("token_id", sa.BigInteger(), nullable=False),
        sa.Column("transaction_hash", sa.String(length=100), nullable=True),
        sa.Column("block_number", sa.BigInteger(), nullable=True),
        sa.Column("transaction_index", sa.Integer(), nullable=True),
        sa.Column("transaction_type", sa.String(length=20), nullable=False),
        sa.Column("status", sa.String(length=10), nullable=False),
        sa.Column("counterparty_addr", sa.String(length=100), nullable=True),
        sa.Column("amount", sa.Numeric(precision=38, scale=0), nullable=False),
        sa.Column("price_usd", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("gas_used", sa.Integer(), nullable=True),
        sa.Column("gas_price", sa.Numeric(precision=20, scale=0), nullable=True),
        sa.Column("fee_value", sa.Numeric(precision=20, scale=4), nullable=False),
        sa.Column("fee_currency", sa.String(length=20), nullable=False),
        sa.Column("block_timestamp", sa.DateTime(timezone=True), nullable=True),
        sa.Column("detected_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("timestamp", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.CheckConstraint("amount >= 0", name="check_amount_non_negative"),
        sa.CheckConstraint("wallet_id IS NOT NULL OR cex_account_id IS NOT NULL", name="check_has_owner"),
        sa.ForeignKeyConstraint(["cex_account_id"], ["cex_accounts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["chain_id"], ["chains.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["token_id"], ["tokens.id"], ondelete="RESTRICT"),
        sa.ForeignKeyConstraint(["wallet_id"], ["wallets.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_tx_chain_status", "transactions", ["chain_id", "status"], unique=False)
    op.create_index("idx_tx_wallet_time", "transactions", ["wallet_id", "timestamp"], unique=False)
    op.create_index("idx_tx_wallet_token", "transactions", ["wallet_id", "token_id"], unique=False)
    op.create_index(op.f("ix_transactions_block_timestamp"), "transactions", ["block_timestamp"], unique=False)
    op.create_index(op.f("ix_transactions_cex_account_id"), "transactions", ["cex_account_id"], unique=False)
    op.create_index(op.f("ix_transactions_chain_id"), "transactions", ["chain_id"], unique=False)
    op.create_index(op.f("ix_transactions_created_at"), "transactions", ["created_at"], unique=False)
    op.create_index(op.f("ix_transactions_token_id"), "transactions", ["token_id"], unique=False)
    op.create_index(op.f("ix_transactions_transaction_hash"), "transactions", ["transaction_hash"], unique=False)
    op.create_index(op.f("ix_transactions_uuid"), "transactions", ["uuid"], unique=False)
    op.create_index(op.f("ix_transactions_wallet_id"), "transactions", ["wallet_id"], unique=False)
    op.create_index("uq_tx_hash_chain", "transactions", ["transaction_hash", "chain_id"], unique=True)
    op.create_table(
        "cex_balances",
        sa.Column("previous_balance_decimal", sa.Numeric(precision=38, scale=18), nullable=True),
        sa.Column("balance_change_24h", sa.Numeric(precision=38, scale=18), nullable=True),
        sa.Column("balance_change_percent_24h", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("total_interest_earned", sa.Numeric(precision=38, scale=18), nullable=True),
        sa.Column("interest_rate_apy", sa.Numeric(precision=8, scale=4), nullable=True),
        sa.Column("last_updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("sync_status", sa.String(length=20), nullable=False),
        sa.Column("all_time_high_usd", sa.Numeric(precision=20, scale=4), nullable=True),
        sa.Column("all_time_high_date", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.Column("subaccount_id", sa.BigInteger(), nullable=False),
        sa.Column("token_id", sa.BigInteger(), nullable=False),
        sa.Column("amount", sa.Numeric(precision=38, scale=0), nullable=False),
        sa.Column("amount_decimal", sa.Numeric(precision=38, scale=18), nullable=False),
        sa.Column("total_balance", sa.Numeric(precision=38, scale=18), nullable=False),
        sa.Column("locked_balance", sa.Numeric(precision=38, scale=18), nullable=False),
        sa.Column("price_usd", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("avg_price_usd", sa.Numeric(precision=20, scale=4), nullable=False),
        sa.Column("last_price_update", sa.DateTime(timezone=True), nullable=True),
        sa.Column("asset_type", sa.String(length=20), nullable=False),
        sa.Column("is_lending", sa.Boolean(), nullable=False),
        sa.Column("is_staking", sa.Boolean(), nullable=False),
        sa.CheckConstraint("amount >= 0", name="positive_cex_balance_raw"),
        sa.CheckConstraint("amount_decimal >= 0", name="positive_cex_balance_decimal"),
        sa.ForeignKeyConstraint(["subaccount_id"], ["cex_subaccounts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["token_id"], ["tokens.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("subaccount_id", "token_id", name="uq_cex_balance_subaccount_symbol"),
    )
    op.create_index(op.f("ix_cex_balances_created_at"), "cex_balances", ["created_at"], unique=False)
    op.create_index(op.f("ix_cex_balances_uuid"), "cex_balances", ["uuid"], unique=False)
    op.create_table(
        "cex_balances_history",
        sa.Column("snapshot_date", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("snapshot_type", sa.String(length=20), nullable=False),
        sa.Column("triggered_by", sa.String(length=50), nullable=True),
        sa.Column(
            "id",
            sa.BigInteger(),
            autoincrement=True,
            nullable=False,
            comment="Internal primary key for database operations",
        ),
        sa.Column(
            "uuid",
            sa.UUID(),
            server_default=sa.text("gen_random_uuid()"),
            nullable=False,
            comment="External identifier for API and frontend",
        ),
        sa.Column("memo", sa.Text(), nullable=True),
        sa.Column("is_deleted", sa.Boolean(), server_default="false", nullable=False),
        sa.Column("created_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), server_default=sa.text("now()"), nullable=False),
        sa.Column("created_by", sa.BigInteger(), nullable=True),
        sa.Column("updated_by", sa.BigInteger(), nullable=True),
        sa.Column("subaccount_id", sa.BigInteger(), nullable=False),
        sa.Column("token_id", sa.BigInteger(), nullable=False),
        sa.Column("amount", sa.Numeric(precision=38, scale=0), nullable=False),
        sa.Column("amount_decimal", sa.Numeric(precision=38, scale=18), nullable=False),
        sa.Column("total_balance", sa.Numeric(precision=38, scale=18), nullable=False),
        sa.Column("locked_balance", sa.Numeric(precision=38, scale=18), nullable=False),
        sa.Column("price_usd", sa.Numeric(precision=20, scale=8), nullable=True),
        sa.Column("avg_price_usd", sa.Numeric(precision=20, scale=4), nullable=False),
        sa.Column("last_price_update", sa.DateTime(timezone=True), nullable=True),
        sa.Column("asset_type", sa.String(length=20), nullable=False),
        sa.Column("is_lending", sa.Boolean(), nullable=False),
        sa.Column("is_staking", sa.Boolean(), nullable=False),
        sa.CheckConstraint(
            "snapshot_type IN ('transaction', 'hourly', 'daily', 'weekly', 'monthly')", name="valid_cex_snapshot_type"
        ),
        sa.ForeignKeyConstraint(["subaccount_id"], ["cex_subaccounts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["token_id"], ["tokens.id"], ondelete="RESTRICT"),
        sa.PrimaryKeyConstraint("snapshot_date", "id"),
    )
    op.create_index(
        "idx_cex_history_subaccount_date", "cex_balances_history", ["subaccount_id", "snapshot_date"], unique=False
    )
    op.create_index("idx_cex_history_token_date", "cex_balances_history", ["token_id", "snapshot_date"], unique=False)
    op.create_index(op.f("ix_cex_balances_history_created_at"), "cex_balances_history", ["created_at"], unique=False)
    op.create_index(
        op.f("ix_cex_balances_history_snapshot_date"), "cex_balances_history", ["snapshot_date"], unique=False
    )
    op.create_index(op.f("ix_cex_balances_history_uuid"), "cex_balances_history", ["uuid"], unique=False)
    # ### end Alembic commands ###

    # Turn balances_history and nft_balances_history into hypertables
    op.execute("SELECT create_hypertable('balances_history', 'snapshot_date', if_not_exists => TRUE)")
    op.execute("SELECT create_hypertable('nft_balances_history', 'snapshot_date', if_not_exists => TRUE)")
    op.execute("SELECT create_hypertable('cex_balances_history', 'snapshot_date', if_not_exists => TRUE)")


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_cex_balances_history_uuid"), table_name="cex_balances_history")
    op.drop_index(op.f("ix_cex_balances_history_snapshot_date"), table_name="cex_balances_history")
    op.drop_index(op.f("ix_cex_balances_history_created_at"), table_name="cex_balances_history")
    op.drop_index("idx_cex_history_token_date", table_name="cex_balances_history")
    op.drop_index("idx_cex_history_subaccount_date", table_name="cex_balances_history")
    op.drop_table("cex_balances_history")
    op.drop_index(op.f("ix_cex_balances_uuid"), table_name="cex_balances")
    op.drop_index(op.f("ix_cex_balances_created_at"), table_name="cex_balances")
    op.drop_table("cex_balances")
    op.drop_index("uq_tx_hash_chain", table_name="transactions")
    op.drop_index(op.f("ix_transactions_wallet_id"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_uuid"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_transaction_hash"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_token_id"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_created_at"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_chain_id"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_cex_account_id"), table_name="transactions")
    op.drop_index(op.f("ix_transactions_block_timestamp"), table_name="transactions")
    op.drop_index("idx_tx_wallet_token", table_name="transactions")
    op.drop_index("idx_tx_wallet_time", table_name="transactions")
    op.drop_index("idx_tx_chain_status", table_name="transactions")
    op.drop_table("transactions")
    op.drop_index(op.f("ix_nft_balances_history_uuid"), table_name="nft_balances_history")
    op.drop_index(op.f("ix_nft_balances_history_snapshot_date"), table_name="nft_balances_history")
    op.drop_index(op.f("ix_nft_balances_history_created_at"), table_name="nft_balances_history")
    op.drop_index("idx_nft_history_wallet_date", table_name="nft_balances_history")
    op.drop_table("nft_balances_history")
    op.drop_index(op.f("ix_nft_balances_uuid"), table_name="nft_balances")
    op.drop_index(op.f("ix_nft_balances_created_at"), table_name="nft_balances")
    op.drop_table("nft_balances")
    op.drop_index(op.f("ix_cex_subaccounts_uuid"), table_name="cex_subaccounts")
    op.drop_index(op.f("ix_cex_subaccounts_created_at"), table_name="cex_subaccounts")
    op.drop_table("cex_subaccounts")
    op.drop_index(op.f("ix_balances_history_wallet_id"), table_name="balances_history")
    op.drop_index(op.f("ix_balances_history_uuid"), table_name="balances_history")
    op.drop_index(op.f("ix_balances_history_token_id"), table_name="balances_history")
    op.drop_index(op.f("ix_balances_history_snapshot_date"), table_name="balances_history")
    op.drop_index(op.f("ix_balances_history_created_at"), table_name="balances_history")
    op.drop_index(op.f("ix_balances_history_chain_id"), table_name="balances_history")
    op.drop_index("ix_balance_history_wallet_date", table_name="balances_history")
    op.drop_index("ix_balance_history_type_date", table_name="balances_history")
    op.drop_index("ix_balance_history_token_date", table_name="balances_history")
    op.drop_table("balances_history")
    op.drop_index(op.f("ix_balances_wallet_id"), table_name="balances")
    op.drop_index(op.f("ix_balances_uuid"), table_name="balances")
    op.drop_index(op.f("ix_balances_token_id"), table_name="balances")
    op.drop_index(op.f("ix_balances_created_at"), table_name="balances")
    op.drop_index(op.f("ix_balances_chain_id"), table_name="balances")
    op.drop_table("balances")
    op.drop_index(op.f("ix_wallets_uuid"), table_name="wallets")
    op.drop_index("ix_wallets_user_chain", table_name="wallets")
    op.drop_index("ix_wallets_portfolio", table_name="wallets")
    op.drop_index(op.f("ix_wallets_created_at"), table_name="wallets")
    op.drop_index(op.f("ix_wallets_chain_id"), table_name="wallets")
    op.drop_index(op.f("ix_wallets_address"), table_name="wallets")
    op.drop_table("wallets")
    op.drop_index(op.f("ix_cex_accounts_uuid"), table_name="cex_accounts")
    op.drop_index(op.f("ix_cex_accounts_created_at"), table_name="cex_accounts")
    op.drop_index("idx_cex_account_user_exchange", table_name="cex_accounts")
    op.drop_table("cex_accounts")
    op.drop_index(op.f("ix_tokens_uuid"), table_name="tokens")
    op.drop_index(op.f("ix_tokens_created_at"), table_name="tokens")
    op.drop_index(op.f("ix_tokens_chain_id"), table_name="tokens")
    op.drop_index("idx_token_symbol_chain", table_name="tokens")
    op.drop_index("idx_token_price", table_name="tokens")
    op.drop_index("idx_token_chain_native", table_name="tokens")
    op.drop_table("tokens")
    op.drop_index(op.f("ix_rpcs_uuid"), table_name="rpcs")
    op.drop_index(op.f("ix_rpcs_created_at"), table_name="rpcs")
    op.drop_index("idx_rpc_chain_priority", table_name="rpcs")
    op.drop_table("rpcs")
    op.drop_index(op.f("ix_portfolios_uuid"), table_name="portfolios")
    op.drop_index(op.f("ix_portfolios_user_id"), table_name="portfolios")
    op.drop_index(op.f("ix_portfolios_created_at"), table_name="portfolios")
    op.drop_table("portfolios")
    op.drop_index(op.f("ix_users_uuid"), table_name="users")
    op.drop_index("ix_users_username_active", table_name="users", postgresql_where="is_deleted = false")
    op.drop_index("ix_users_email_active", table_name="users", postgresql_where="is_deleted = false")
    op.drop_index(op.f("ix_users_created_at"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_exchanges_uuid"), table_name="exchanges")
    op.drop_index(op.f("ix_exchanges_created_at"), table_name="exchanges")
    op.drop_table("exchanges")
    op.drop_index(op.f("ix_chains_uuid"), table_name="chains")
    op.drop_index(op.f("ix_chains_created_at"), table_name="chains")
    op.drop_index("idx_chain_active_testnet", table_name="chains")
    op.drop_table("chains")
    # ### end Alembic commands ###
